!function(){"use strict";function r(r,e){var n,o;for(n in e)o=e[n],r[n]=o;return r}function e(){return{bower:{jsonFile:"bower.json",pkgDir:"bower_components"},npm:{jsonFile:"package.json",pkgDir:"node_modules"}}}function n(r){return"[object Array]"===Object.prototype.toString.call(r)}function o(e,n){var o,i=e.dependencies||{},t=[];n&&(i=r(i,e.devDependencies||{}));for(o in i)t.push(o);return t}function i(r,e){var n=[new RegExp(e+".min.js$"),new RegExp(e+".js$")],o=[],i=a.readdirSyncRecursive(s.join(r,e));return i.forEach(function(r){n.forEach(function(e,n){r.match(e)&&(o[n]=r)})}),o.filter(function(r){return"undefined"!=typeof r}).shift()}function t(r,e,o,t,c){var a=function(r,e){return u.existsSync(r)?!0:(f("Package ( "+e+" ) file at "+r+" does not exist."),!1)},p=function(r,n){return r=s.resolve(e,n,r),a(r,n),r},g=function(r){var o=c[r]||i(e,r);return o?n(o)?o.forEach(function(e,n,o){o[n]=p(e,r)}):o=p(o,r):f('Package "'+r+'" has no valid paths. Recommend override.'),o},d={};return r.forEach(function(r){d[r]=g(r)}),d}function c(r,n){var i,c,a=e()[r],f=[];if(!a)throw new Error('Packager "'+r+'" not supported.');if(i=s.join(n.rootDir,a.jsonFile),!u.existsSync(i))throw new Error('Packager "'+r+'" missing JSON file "'+a.jsonFile+'". ('+i+")");if(c=s.join(n.rootDir,a.pkgDir),!u.existsSync(c))throw new Error('Packager "'+r+'" missing package directory "'+a.pkgDir+'". ('+c+")");return f=o(require(i),n.includeDevPackages),t(f,c,a.jsonFile,a.defaultMain,n.overrides)}var a=require("wrench"),s=require("path"),u=require("fs"),f=function(){console.log.apply(this,arguments)};module.exports=function(e){var o,i,t,a={packagers:["npm","bower"],overrides:{},includeDevPackages:!1,logOutput:!1,rootDir:process.cwd(),order:[],ignore:[]},u=[],p={};e=r(a,e),e.rootDir=s.resolve(e.rootDir),e.logOutput||(f=function(){}),e.packagers.forEach(function(n){p=r(p,c(n,e))});for(o in p)e.ignore.indexOf(o)>-1?f("Ignoring: "+o):(i=p[o],i?(t=e.order.indexOf(o),t>-1?(f("Ordering: "+o),n(i)?(f("Expanding: "+o+" with files ("+i+")"),Array.prototype.splice.apply(u,[t,0].concat(i))):(f("Inserting: "+o+" with path ("+i+")"),u[t]=i)):n(i)?(f("Concatenating: "+o+" with path ("+i+")"),u=u.concat(i)):(f("Pushing: "+o+" with path ("+i+")"),u.push(i))):f("Path for "+o+" is empty. ("+i+")"));return f("Found "+u.length+" dependent files."),u}}();