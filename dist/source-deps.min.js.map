{"version":3,"file":"source-deps.min.js","sources":["main.js"],"names":[],"mappings":"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","sourcesContent":["(function () {\n  'use strict';\n\n  var wrench = require('wrench'),\n      path = require('path'),\n      fs = require('fs'),\n      colors = require('colors'),\n      _log = function () {\n        arguments[0] = '[' + colors.grey('SOURCE DEPS') + '] ' + arguments[0];\n        console.log.apply(this, arguments);\n      };\n\n  colors.setTheme({\n    info: 'cyan',\n    warn: 'yellow',\n    error: 'red',\n    success: 'green'\n  });\n\n  function _mergeObjects (o1, o2) {\n    var k, v;\n    for (k in o2) {\n      v = o2[k];\n      o1[k] = v;\n    }\n    return o1;\n  }\n\n  function _packagers () {\n    return {\n      bower: {\n        manifests: ['bower.json', '.bower.json'],\n        pkgDir: 'bower_components'\n      },\n      npm: {\n        manifests: ['package.json'],\n        pkgDir: 'node_modules'\n      }\n    };\n  }\n\n  function _isArray (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n\n  function _pullDependencies (manifest, opts) {\n    var deps = manifest.dependencies || {},\n        pkgList = [],\n        current;\n\n    if (opts.includeDevPackages) {\n      deps = _mergeObjects(deps, manifest.devDependencies || {});\n    }\n\n    for (current in deps) {\n      if (opts.ignore.indexOf(current) == -1) {\n        pkgList.push(current);\n      } else {\n        _log('Ignoring '.success + colors.info(current));\n      }\n    }\n\n    return pkgList;\n  }\n\n  function _guessDistFiles (pkgDir, pkg) {\n    var testPatterns = [\n          new RegExp(pkg + '.min.js$'),\n          new RegExp(pkg + '.js$')\n        ],\n        matches = [],\n        files = wrench.readdirSyncRecursive(path.join(pkgDir, pkg));\n\n    files.forEach(function (filename, idx1, arr1) {\n      testPatterns.forEach(function (pattern, idx2, arr2) {\n        if (filename.match(pattern)) {\n          matches[idx2] = filename;\n        }\n      });\n    });\n\n    return matches.filter(function (m) { return typeof(m) !== 'undefined'; }).shift();\n  }\n\n  function _resolveMains (pkgList, pkgDir, overrides, done) {\n    var _check = function (p, pkg) {\n          if (!fs.existsSync(p)) {\n            _log('Package '.warn + colors.info(pkg) + ' file at '.warn + colors.info(p) + ' does not exist.'.warn);\n            return false;\n          }\n          return true;\n        },\n        _expand = function (p, pkg) {\n          p = path.resolve(pkgDir, pkg, p);\n          return p;\n        },\n        _process = function (pkg) {\n          var filepaths = overrides[pkg] || _guessDistFiles(pkgDir, pkg),\n              _processPath = function (path) {\n                path = _expand(path, pkg);\n                if (_check(path, pkg)) {\n                  return path;\n                }\n                return false;\n              };\n\n          if (_isArray(filepaths)) {\n            filepaths = filepaths.map(_processPath).filter(function (path) { return !!path; });\n          } else if (filepaths) {\n            filepaths = _processPath(filepaths);\n          }\n\n          if (!filepaths || (_isArray(filepaths) && filepaths.length === 0)) {\n            _log('Package '.warn + colors.info(pkg) + ' has no valid paths. Recommend override.'.warn);\n            filepaths = undefined;\n          }\n\n          return filepaths;\n        },\n        paths = {};\n\n    pkgList.forEach(function (element, idx, arr) {\n      if (paths.hasOwnProperty(element)) {\n        return;\n      }\n      paths[element] = _process(element);\n    });\n\n    return paths;\n  }\n\n  function _findManifest (prefix, manifests) {\n    var selected, p;\n    manifests.forEach(function (manifest, idx, arr) {\n      p = path.join(prefix, manifest);\n      if (!selected && fs.existsSync(p)) {\n        selected = p;\n      }\n    });\n    return selected;\n  }\n\n  function _scanPkgr (pkgr, opts) {\n    var pkgrEntry = _packagers()[pkgr],\n        pkgList = [],\n        resolved = {},\n        manifestPath,\n        pkgDirPath;\n\n    if (!pkgrEntry) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' not supported.'.error);\n    }\n\n    manifestPath = _findManifest(opts.rootDir, pkgrEntry.manifests);\n\n    if (!manifestPath) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' has no valid manifest files '.error + colors.info(pkgrEntry.manifests) + ' @ '.error);\n    }\n\n    pkgDirPath = path.join(opts.rootDir, pkgrEntry.pkgDir);\n\n    if (!fs.existsSync(pkgDirPath)) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' missing package directory '.error + colors.info(pkgrEntry.pkgDir) + ' @ '.error + colors.info(pkgDirPath));\n    }\n\n    pkgList = _pullDependencies(require(manifestPath), opts);\n\n    if (opts.include) {\n      pkgList = pkgList.concat(opts.include);\n    }\n\n    if (opts.recursive) {\n      pkgList = (function (pkgList, entry, opts) {\n\n        var newList = [];\n\n        function recursePkg (startPkg) {\n\n          var tree = [];\n\n          function walk (pkg) {\n            var jPath = _findManifest(path.join(opts.rootDir, entry.pkgDir, pkg), entry.manifests),\n                found;\n\n            if (!jPath) {\n              _log('Child Package'.warn + ' of ' + colors.info(pkg) + ' does not contain a valid manifest. Continuing...');\n              return;\n            }\n\n            opts.includeDevPackages = false;\n            found = _pullDependencies(require(jPath), opts);\n\n            if (found) {\n              Array.prototype.splice.apply(tree, [0, 0].concat(found));\n              found.forEach(function (pkg, idx, arr) {\n                return walk(pkg);\n              });\n            }\n          }\n\n          walk(startPkg);\n          return tree;\n        }\n\n        newList = pkgList.slice();\n\n        pkgList.forEach(function (pkg, idx, arr) {\n          Array.prototype.splice.apply(newList, [newList.indexOf(pkg), 0].concat(recursePkg(pkg)));\n        });\n\n        return newList;\n\n      })(pkgList, pkgrEntry, opts);\n    }\n\n    resolved = _resolveMains(\n      pkgList,\n      pkgDirPath,\n      opts.overrides\n    );\n\n    return resolved;\n  }\n\n  module.exports = function (opts) {\n    var settings = {\n          packagers: ['npm', 'bower'],\n          overrides: {},\n          includeDevPackages: false,\n          recursive: false,\n          logOutput: false,\n          rootDir: process.cwd(),\n          order: [],\n          ignore: [],\n          include: []\n        },\n        pathList = [],\n        mains = {},\n        addPkg = function (pkg, idx) {\n          var path;\n\n          path = mains[pkg];\n          if (!path) {\n            return;\n          }\n\n          if (idx) {\n            Array.prototype.splice.apply(pathList, [idx, 0].concat(path));\n            return;\n          }\n\n          if (_isArray(path)) {\n            pathList = pathList.concat(path);\n            return;\n          }\n          pathList.push(path);\n        },\n        currentPkg;\n\n    opts = _mergeObjects(settings, opts);\n    opts.rootDir = path.resolve(opts.rootDir);\n\n    if (!opts.logOutput) {\n      _log = function () {};\n    }\n\n    opts.packagers.forEach(function (element, idx, array) {\n      mains = _mergeObjects(mains, _scanPkgr(element, opts));\n    });\n\n    opts.order.forEach(function (pkg, idx, array) {\n      addPkg(pkg, idx);\n      delete mains[pkg];\n    });\n\n    for (currentPkg in mains) {\n      addPkg(currentPkg);\n    }\n\n    _log('Loaded '.success + colors.info(pathList.length) + ' dependent files.'.success);\n\n    return pathList;\n  };\n})();"],"sourceRoot":"/source/"}