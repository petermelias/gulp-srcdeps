{"version":3,"file":"source-deps.min.js","sources":["main.js"],"names":[],"mappings":"CAAA,WACA,YASA,SAAA,GAAA,EAAA,GACA,GAAA,GAAA,CACA,KAAA,IAAA,GACA,EAAA,EAAA,GACA,EAAA,GAAA,CAEA,OAAA,GAGA,QAAA,KACA,OACA,OACA,SAAA,aACA,OAAA,oBAEA,KACA,SAAA,eACA,OAAA,iBAKA,QAAA,GAAA,GACA,MAAA,mBAAA,OAAA,UAAA,SAAA,KAAA,GAGA,QAAA,GAAA,EAAA,GACA,GAEA,GAFA,EAAA,EAAA,iBACA,IAGA,KACA,EAAA,EAAA,EAAA,EAAA,qBAGA,KAAA,IAAA,GACA,EAAA,KAAA,EAGA,OAAA,GAGA,QAAA,GAAA,EAAA,GACA,GAAA,IACA,GAAA,QAAA,EAAA,YACA,GAAA,QAAA,EAAA,SAEA,KACA,EAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,GAUA,OARA,GAAA,QAAA,SAAA,GACA,EAAA,QAAA,SAAA,EAAA,GACA,EAAA,MAAA,KACA,EAAA,GAAA,OAKA,EAAA,OAAA,SAAA,GAAA,MAAA,mBAAA,KAAA,QAGA,QAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,EAAA,GACA,MAAA,GAAA,WAAA,IAIA,GAHA,EAAA,aAAA,EAAA,cAAA,EAAA,qBACA,IAIA,EAAA,SAAA,EAAA,GAGA,MAFA,GAAA,EAAA,QAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,GAEA,EAAA,SAAA,GACA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAeA,OAZA,IACA,EAAA,YAAA,EAAA,6CAGA,EAAA,GACA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,KAGA,EAAA,EAAA,EAAA,GAGA,GAEA,IAMA,OAJA,GAAA,QAAA,SAAA,GACA,EAAA,GAAA,EAAA,KAGA,EAGA,QAAA,GAAA,EAAA,GACA,GAEA,GACA,EAHA,EAAA,IAAA,GACA,IAIA,KAAA,EACA,KAAA,IAAA,OAAA,aAAA,EAAA,mBAKA,IAFA,EAAA,EAAA,KAAA,EAAA,QAAA,EAAA,WAEA,EAAA,WAAA,GACA,KAAA,IAAA,OAAA,aAAA,EAAA,wBAAA,EAAA,SAAA,OAAA,EAAA,IAKA,IAFA,EAAA,EAAA,KAAA,EAAA,QAAA,EAAA,SAEA,EAAA,WAAA,GACA,KAAA,IAAA,OAAA,aAAA,EAAA,gCAAA,EAAA,OAAA,OAAA,EAAA,IAKA,OAFA,GAAA,EAAA,QAAA,GAAA,EAAA,oBAEA,EACA,EACA,EACA,EAAA,SACA,EAAA,YACA,EAAA,WAzIA,GAAA,GAAA,QAAA,UACA,EAAA,QAAA,QACA,EAAA,QAAA,MACA,EAAA,WACA,QAAA,IAAA,MAAA,KAAA,WAyIA,QAAA,QAAA,SAAA,GACA,GASA,GACA,EAVA,GACA,WAAA,MAAA,SACA,aACA,oBAAA,EACA,WAAA,EACA,QAAA,QAAA,OAEA,KACA,IAIA,GAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,QAAA,EAAA,SAEA,EAAA,YACA,EAAA,cAGA,EAAA,UAAA,QAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,KAGA,KAAA,IAAA,GACA,EAAA,EAAA,GACA,IAIA,EAAA,GACA,EAAA,EAAA,OAAA,GAEA,EAAA,KAAA,GAMA,OAFA,GAAA,SAAA,EAAA,OAAA,qBAEA","sourcesContent":["(function () {\n  'use strict';\n\n  var wrench = require('wrench'),\n      path = require('path'),\n      fs = require('fs'),\n      _log = function () {\n        console.log.apply(this, arguments);\n      };\n\n  function _mergeObjects(o1, o2) {\n    var k, v;\n    for (k in o2) {\n      v = o2[k];\n      o1[k] = v;\n    }\n    return o1;\n  }\n\n  function _packagers() {\n    return {\n      bower: {\n        jsonFile: 'bower.json',\n        pkgDir: 'bower_components'\n      },\n      npm: {\n        jsonFile: 'package.json',\n        pkgDir: 'node_modules'\n      }\n    };\n  }\n\n  function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n\n  function _pullDependencies(jsonFile, includeDev) {\n    var deps = jsonFile.dependencies || {},\n        pkgList = [],\n        current;\n\n    if (includeDev) {\n      deps = _mergeObjects(deps, jsonFile.devDependencies || {});\n    }\n    \n    for (current in deps) {\n      pkgList.push(current);\n    }\n    \n    return pkgList;\n  }\n\n  function _guessDistFiles(pkgDir, pkg) {\n    var testPatterns = [\n          new RegExp(pkg + '.min.js$'),\n          new RegExp(pkg + '.js$')\n        ],\n        matches = [],\n        files = wrench.readdirSyncRecursive(path.join(pkgDir, pkg));\n\n    files.forEach(function (filename, idx1, arr1) {\n      testPatterns.forEach(function (pattern, idx2, arr2) {\n        if (filename.match(pattern)) {\n          matches[idx2] = filename;\n        }\n      });\n    });\n\n    return matches.filter(function (m) { return typeof(m) !== 'undefined'; }).shift();\n  }\n\n  function _resolveMains(pkgList, pkgDir, pkgrFileName, pkgrDefaultMain, overrides, done) {\n    var _check = function (p, pkg) {\n          if (!fs.existsSync(p)) {\n            _log('Package ( ' + pkg + ' ) file at ' + p + ' does not exist.');\n            return false;\n          }\n          return true;\n        },\n        _expand = function (p, pkg) {\n          p = path.resolve(pkgDir, pkg, p);\n          _check(p, pkg);\n          return p;\n        },\n        _process = function (pkg) {\n          var filepaths = overrides[pkg] || _guessDistFiles(pkgDir, pkg),\n              _temp = [];\n\n          if (!filepaths) {\n            _log('Package \"' + pkg + '\" has no valid paths. Recommend override.');\n          }\n\n          if (_isArray(filepaths)) {\n            filepaths.forEach(function (element, idx, arr) {\n              arr[idx] = _expand(element, pkg);\n            });\n          } else {\n            filepaths = _expand(filepaths, pkg);\n          }\n\n          return filepaths;\n        },\n        paths = {};\n\n    pkgList.forEach(function (element, idx, arr) {\n      paths[element] = _process(element);\n    });\n\n    return paths;\n  }\n\n  function _scanPkgr(pkgr, opts) {\n    var pkgrEntry = _packagers()[pkgr],\n        pkgList = [],\n        jsonPath,\n        pkgDirPath;\n    \n    if (!pkgrEntry) {\n      throw new Error('Packager \"' + pkgr + '\" not supported.');\n    }\n\n    jsonPath = path.join(opts.rootDir, pkgrEntry.jsonFile);\n\n    if (!fs.existsSync(jsonPath)) {\n      throw new Error('Packager \"' + pkgr + '\" missing JSON file \"' + pkgrEntry.jsonFile + '\". (' + jsonPath + ')');\n    }\n\n    pkgDirPath = path.join(opts.rootDir, pkgrEntry.pkgDir);\n\n    if (!fs.existsSync(pkgDirPath)) {\n      throw new Error('Packager \"' + pkgr + '\" missing package directory \"' + pkgrEntry.pkgDir + '\". (' + pkgDirPath + ')');\n    }\n\n    pkgList = _pullDependencies(require(jsonPath), opts.includeDevPackages);\n    \n    return _resolveMains(\n      pkgList,\n      pkgDirPath,\n      pkgrEntry.jsonFile,\n      pkgrEntry.defaultMain,\n      opts.overrides\n    );\n  }\n\n  module.exports = function (opts) {\n    var settings = {\n          packagers: ['npm', 'bower'],\n          overrides: {},\n          includeDevPackages: false,\n          logOutput: false,\n          rootDir: process.cwd()\n        },\n        pathList = [],\n        mains = {},\n        currentPkg,\n        currentPath;\n\n    opts = _mergeObjects(settings, opts);\n    opts.rootDir = path.resolve(opts.rootDir);\n\n    if (!opts.logOutput) {\n      _log = function () {};\n    }\n\n    opts.packagers.forEach(function (element, idx, array) {\n      mains = _mergeObjects(mains, _scanPkgr(element, opts));\n    });\n    \n    for (currentPkg in mains) {\n      currentPath = mains[currentPkg];\n      if (!currentPath) {\n        continue;\n      }\n\n      if (_isArray(currentPath)) {\n        pathList = pathList.concat(currentPath);\n      } else{\n        pathList.push(currentPath);\n      }\n    }\n    \n    _log('Found ' + pathList.length + ' dependant files.');\n\n    return pathList;\n  };\n})();"],"sourceRoot":"/source/"}