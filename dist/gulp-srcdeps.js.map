{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"gulp-srcdeps.js","sourcesContent":["(function () {\n  'use strict';\n\n  var gulp = require('gulp'),\n      util = require('gulp-util'),\n      path = require('path'),\n      fs = require('fs'),\n      _log = function () {\n        util.log.apply(this, arguments);\n      };\n\n  function _mergeObjects(o1, o2) {\n    var k, v;\n    for (k in o2) {\n      v = o2[k];\n      o1[k] = v;\n    }\n    return o1;\n  }\n\n  function _packagers() {\n    return {\n      bower: {\n        jsonFile: 'bower.json',\n        pkgDir: 'bower_components',\n        defaultMain: './index.js'\n      },\n      npm: {\n        jsonFile: 'package.json',\n        pkgDir: 'node_modules',\n        defaultMain: './index.js'\n      }\n    };\n  }\n\n  function _error(message) {\n    return new util.PluginError('gulp-srcdeps', message);\n  }\n\n  function _pullDependencies(jsonFile, includeDev) {\n    var deps = jsonFile.dependencies || {},\n        pkgList = [],\n        current;\n\n    if (includeDev) {\n      deps = _mergeObjects(deps, jsonFile.devDependencies || {});\n    }\n    \n    for (current in deps) {\n      pkgList.push(current);\n    }\n    \n    return pkgList;\n  }\n\n  function _resolveMains(pkgList, pkgDir, pkgrFileName, pkgrDefaultMain, overrides) {\n    var pkgMains = {};\n\n    pkgList.map(function (pkg) {\n      var pkgFile = require(path.join(pkgDir, pkg, pkgrFileName));\n      \n      pkgMains[pkg] = overrides[pkg] || pkgFile.main || pkgrDefaultMain;\n      pkgMains[pkg] = path.join(pkgDir, pkg, pkgMains[pkg]);\n\n      if (!fs.existsSync(pkgMains[pkg])) {\n        _log(util.colors.yellow('Package:'), util.colors.green(pkg), util.colors.yellow('has no valid main path. Recommend override.'));\n      }\n    });\n\n    return pkgMains;\n  }\n\n  function _scanPkgr(pkgr, opts) {\n    var pkgrEntry = _packagers()[pkgr],\n        pkgList = [],\n        mains = {},\n        jsonPath,\n        pkgDirPath;\n    \n    if (!pkgrEntry) {\n      throw _error('Packager \"' + pkgr + '\" not supported.');\n    }\n\n    jsonPath = path.join(process.cwd(), pkgrEntry.jsonFile);\n\n    if (!fs.existsSync(jsonPath)) {\n      throw _error('Packager \"' + pkgr + '\" missing JSON file \"' + pkgrEntry.jsonFile + '\". (' + jsonPath + ')');\n    }\n\n    pkgDirPath = path.join(process.cwd(), pkgrEntry.pkgDir);\n\n    if (!fs.existsSync(pkgDirPath)) {\n      throw _error('Packager \"' + pkgr + '\" missing package directory \"' + pkgrEntry.pkgDir + '\". (' + pkgDirPath + ')');\n    }\n\n    pkgList = _pullDependencies(require(jsonPath), opts.includeDevPackages);\n    mains = _resolveMains(pkgList, pkgDirPath, pkgrEntry.jsonFile, pkgrEntry.defaultMain, opts.overrides);\n\n    return mains;\n  }\n\n  module.exports = function (opts) {\n    var settings = {\n          packagers: ['npm', 'bower'],\n          overrides: {},\n          includeDevPackages: false,\n          logOutput: false\n        },\n        allDeps = {},\n        pathList = [],\n        currentPkg,\n        currentPath;\n\n    opts = _mergeObjects(settings, opts);\n\n    if (!opts.logOutput) {\n      _log = function () {};\n    }\n\n    opts.packagers.map(function (pkgr) {\n      allDeps = _mergeObjects(allDeps, _scanPkgr(pkgr, opts));\n    });\n\n    for (currentPkg in allDeps) {\n      currentPath = allDeps[currentPkg];\n      if (currentPath) {\n        pathList.push(currentPath);  \n      }\n    }\n\n    _log('srcdep pulling in ' + pathList.length + ' dependencies...');\n\n    return gulp.src(pathList);\n  };\n})();"],"sourceRoot":"/source/"}