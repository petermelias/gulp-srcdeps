{"version":3,"sources":["main.js","utils.js"],"names":[],"mappingsxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"source-deps.js","sourcesContent":["(function () {\n  'use strict';\n\n  var wrench = require('wrench'),\n      path = require('path'),\n      fs = require('fs'),\n      colors = require('colors'),\n      u = require('./utils.js'),\n      data = require('./data.json'),\n      log;\n\n  colors.setTheme({\n    info: 'cyan',\n    warn: 'yellow',\n    error: 'red',\n    success: 'green'\n  });\n\n  function _pullDependencies (manifest, opts) {\n    var deps = manifest.dependencies || {},\n        pkgList = [],\n        current;\n\n    if (opts.includeDevPackages) {\n      deps = u.mergeObjects(deps, manifest.devDependencies || {});\n    }\n\n    for (current in deps) {\n      if (opts.exclude.indexOf(current) == -1) {\n        pkgList.push(current);\n      } else {\n        log('Excluding '.success + colors.info(current));\n      }\n    }\n\n    return pkgList;\n  }\n\n  function _guessDistFiles (pkgDir, pkg) {\n    var testPatterns = [\n          new RegExp(pkg + '.min.js$'),\n          new RegExp(pkg + '.js$')\n        ],\n        matches = [],\n        files = wrench.readdirSyncRecursive(path.join(pkgDir, pkg));\n\n    files.forEach(function (filename, idx1, arr1) {\n      testPatterns.forEach(function (pattern, idx2, arr2) {\n        if (filename.match(pattern)) {\n          matches[idx2] = filename;\n        }\n      });\n    });\n\n    return matches.filter(function (m) { return typeof(m) !== 'undefined'; }).shift();\n  }\n\n  function _resolveMains (pkgList, pkgDir, overrides, done) {\n    var _check = function (p, pkg) {\n          if (!fs.existsSync(p)) {\n            log('Package '.warn + colors.info(pkg) + ' file at '.warn + colors.info(p) + ' does not exist.'.warn);\n            return false;\n          }\n          return true;\n        },\n        _expand = function (p, pkg) {\n          p = path.resolve(pkgDir, pkg, p);\n          return p;\n        },\n        _process = function (pkg) {\n          var filepaths = overrides[pkg] || _guessDistFiles(pkgDir, pkg),\n              _processPath = function (path) {\n                path = _expand(path, pkg);\n                if (_check(path, pkg)) {\n                  return path;\n                }\n                return false;\n              };\n\n          if (u.isArray(filepaths)) {\n            filepaths = filepaths.map(_processPath).filter(function (path) { return !!path; });\n          } else if (filepaths) {\n            filepaths = _processPath(filepaths);\n          }\n\n          if (!filepaths || (u.isArray(filepaths) && filepaths.length === 0)) {\n            log('Package '.warn + colors.info(pkg) + ' has no valid paths. Recommend override.'.warn);\n            filepaths = undefined;\n          }\n\n          return filepaths;\n        },\n        paths = {};\n\n    pkgList.forEach(function (element, idx, arr) {\n      if (paths.hasOwnProperty(element)) {\n        return;\n      }\n      paths[element] = _process(element);\n    });\n\n    return paths;\n  }\n\n  function _findManifest (prefix, manifests) {\n    var selected, p;\n    manifests.forEach(function (manifest, idx, arr) {\n      p = path.join(prefix, manifest);\n      if (!selected && fs.existsSync(p)) {\n        selected = p;\n      }\n    });\n    return selected;\n  }\n\n  function _scanPkgr (pkgr, opts) {\n    var pkgrEntry = data.packagers[pkgr],\n        pkgList = [],\n        resolved = {},\n        manifestPath,\n        pkgDirPath;\n\n    if (!pkgrEntry) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' not supported.'.error);\n    }\n\n    manifestPath = _findManifest(opts.rootDir, pkgrEntry.manifests);\n\n    if (!manifestPath) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' has no valid manifest files '.error + colors.info(pkgrEntry.manifests) + ' @ '.error);\n    }\n\n    pkgDirPath = path.join(opts.rootDir, pkgrEntry.pkgDir);\n\n    if (!fs.existsSync(pkgDirPath)) {\n      throw new Error('Packager '.error + colors.info(pkgr) + ' missing package directory '.error + colors.info(pkgrEntry.pkgDir) + ' @ '.error + colors.info(pkgDirPath));\n    }\n\n    pkgList = _pullDependencies(require(manifestPath), opts);\n\n    if (opts.only.length > 0) {\n      log('Limiting to: '.success + colors.info(opts.only));\n      pkgList = u.arrayIntersect(pkgList, opts.only);\n    } else {\n      if (opts.include) {\n        pkgList = pkgList.concat(opts.include);\n      }\n    }\n\n    if (opts.recursive) {\n      pkgList = (function (pkgList, entry, opts) {\n\n        var newList = [];\n\n        function recursePkg (startPkg) {\n\n          var tree = [];\n\n          function walk (pkg) {\n            var jPath = _findManifest(path.join(opts.rootDir, entry.pkgDir, pkg), entry.manifests),\n                found;\n\n            if (!jPath) {\n              log('Child Package'.warn + ' of ' + colors.info(pkg) + ' does not contain a valid manifest. Continuing...');\n              return;\n            }\n\n            opts.includeDevPackages = false;\n            found = _pullDependencies(require(jPath), opts);\n\n            if (found) {\n              Array.prototype.splice.apply(tree, [0, 0].concat(found));\n              found.forEach(function (pkg, idx, arr) {\n                return walk(pkg);\n              });\n            }\n          }\n\n          walk(startPkg);\n          return tree;\n        }\n\n        newList = pkgList.slice();\n\n        pkgList.forEach(function (pkg, idx, arr) {\n          Array.prototype.splice.apply(newList, [newList.indexOf(pkg), 0].concat(recursePkg(pkg)));\n        });\n\n        return newList;\n\n      })(pkgList, pkgrEntry, opts);\n    }\n\n    resolved = _resolveMains(\n      pkgList,\n      pkgDirPath,\n      opts.overrides\n    );\n\n    return resolved;\n  }\n\n  module.exports = function (opts) {\n    var settings = {\n          packagers: ['npm', 'bower'],\n          overrides: {},\n          includeDevPackages: false,\n          recursive: false,\n          logOutput: false,\n          rootDir: process.cwd(),\n          order: [],\n          exclude: [],\n          include: [],\n          only: []\n        },\n        pathList = [],\n        mains = {},\n        addPkg = function (pkg, idx) {\n          var path;\n\n          path = mains[pkg];\n          if (!path) {\n            return;\n          }\n\n          if (idx) {\n            Array.prototype.splice.apply(pathList, [idx, 0].concat(path));\n            return;\n          }\n\n          if (u.isArray(path)) {\n            pathList = pathList.concat(path);\n            return;\n          }\n          pathList.push(path);\n        },\n        currentPkg;\n\n    opts = u.mergeObjects(settings, opts);\n    opts.rootDir = path.resolve(opts.rootDir);\n\n    if (!opts.logOutput) {\n      log = function () {};\n    } else {\n      log = u.log;\n    }\n\n    opts.packagers.forEach(function (element, idx, array) {\n      mains = u.mergeObjects(mains, _scanPkgr(element, opts));\n    });\n\n    opts.order.forEach(function (pkg, idx, array) {\n      addPkg(pkg, idx);\n      delete mains[pkg];\n    });\n\n    for (currentPkg in mains) {\n      addPkg(currentPkg);\n    }\n\n    log('Loaded '.success + colors.info(pathList.length) + ' dependent files.'.success);\n\n    return pathList;\n  };\n})();","(function () {\n  'use strict';\n\n  var colors = require('colors');\n\n  module.exports = {\n    log: function () {\n      arguments[0] = '[' + colors.grey('SOURCE DEPS') + '] ' + arguments[0];\n      console.log.apply(this, arguments);\n    },\n    mergeObjects: function (o1, o2) {\n      var k, v;\n      for (k in o2) {\n        v = o2[k];\n        o1[k] = v;\n      }\n      return o1;\n    },\n    isArray: function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    },\n    arrayIntersect: function (a1, a2) {\n      var result;\n\n      result = a1.filter(function (element) {\n        return a2.indexOf(element) != -1;\n      });\n\n      return result;\n    }\n  };\n\n}());"],"sourceRoot":"/source/"}